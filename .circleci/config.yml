# This configuration was automatically generated from a CircleCI 1.0 config.
# It should include any build commands you had along with commands that CircleCI
# inferred from your project structure. We strongly recommend you read all the
# comments in this file to understand the structure of CircleCI 2.0, as the idiom
# for configuration has changed substantially in 2.0 to allow arbitrary jobs rather
# than the prescribed lifecycle of 1.0. In general, we recommend using this generated
# configuration as a reference rather than using it in production, though in most
# cases it should duplicate the execution of your original 1.0 config.
version: 2

defaults: &defaults
  working_directory: ~/repo
  parallelism: 1
  shell: /bin/bash --login
  docker:
    - image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
      command: /sbin/init

jobs:
  build:
    <<: *defaults
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    steps:
    # Machine Setup
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # The following `checkout` command checks out your code to your working directory. In 1.0 we did this implicitly. In 2.0 you can choose where in the course of a job your code should be checked out.
    - checkout
    # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
    # In many cases you can simplify this from what is generated here.
    # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    # This is based on your 1.0 configuration file or project settings
    - run:
        working_directory: ~/repo
        command: nvm install 6.1 && nvm alias default 6.1
    # Dependencies
    #   This would typically go in either a build or a build-and-test job when using workflows
    # Restore the dependency cache
    - restore_cache:
        keys:
        # This branch if available
        - v1-dep-{{ .Branch }}-
        # Default branch if not
        - v1-dep-master-
        # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
        - v1-dep-
    # This is based on your 1.0 configuration file or project settings
    - run: cd data && npm install
    - run: cd build && npm install
    # Save dependency cache
    - save_cache:
        key: v1-dep-{{ .Branch }}-{{ epoch }}
        paths:
          - node_modules
    # Test
    #   This would typically be a build job when using workflows, possibly combined with build
    # This is based on your 1.0 configuration file or project settings
    - run: cd data && npm run coverage -- --reporter mocha-junit-reporter --reporter-options mochaFile=$CIRCLE_TEST_REPORTS/junit/results.xml
    - run: if [ -f coverage/lcov.info ] ; then cd data && CODECLIMATE_REPO_TOKEN=$CODECLIMATE_REPO_TOKEN ./node_modules/.bin/codeclimate-test-reporter < coverage/lcov.info ; fi
    - run: cd data && mv coverage/  $CIRCLE_TEST_REPORTS/

    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: $CIRCLE_TEST_REPORTS
    - store_artifacts:
        path: coverage
    - store_artifacts:
        path: /tmp/circleci-test-results
    - persist_to_workspace:
        root: ~/
        paths:
          - repo
  # Deployment
  # Your existing circle.yml file contains deployment steps.
  # The config translation tool does not support translating deployment steps
  # since deployment in CircleCI 2.0 are better handled through workflows.
  # See the documentation for more information https://circleci.com/docs/2.0/workflows/
  deploy:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build UI
          command: cd ui && lein cljsbuild once min
      - run:
          name: Build data to be burnt into page
          command: cd build && npm start && cd ../
      - run:
          name: Burn
          command: cd build && npm run replace && cd ../
      - run:
          name: Deploy to AWS
          command: sh ./bin/deploy.sh
  # Teardown

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: migrate-to-circle-2.0
